continue
content
exit
image.size
image
next
message
continue
message.split(',').size
message.split(',').first
message.split(',')
f1.close
f1.write(Base64.decode64(message.split(',').last))
f1 = File.open('/tmp/j1234.jpg', 'wb
message.split(',').last
message.split(',')
message.join(',')
message
continue
f1.close
f1.write(Base64.decode64(message))
f1 = File.open('/tmp/1234.jpg', 'wb')
f1 = File.open('/tmp/1234.jpg')
message
Base64.decode64 message
message
continue
Base64.decode64 message
message
ff = File.open("test.txt", "w:Utf-8")
continue
ggg.close
ggg.write(message)
ggg = File.open("/tmp/ggg.jpg", "wb")
ddd = File.open("/tmp/ddd.jpg", "wb")
ddd.close
ddd.write(Base64.decode64(message))
ddd = File.open("/tmp/ddd.jpg", "wb")
Base64.decode64(message)
message
continue
message
Base64.decode64(message)
ddd.close
ddd.write(Base64.decode64(message))
ddd.write(Base64.jpg", "wb")
ddd = File.open("/tmp/ddd.jpg", "wb")
bbb = File.open("bbb.jpg", "wb")
ccc = File.open("ccc.jpg", "wb")
ccc.close
ccc.write(Base64.decode64(message))
ccc = File.open("ccc.jpg", "wb")
continue
ccc.close
ccc.save
ccc.write(Base64.decode64(message))
ccc = File.open("ccc.jpg", "wb")
File.open("ccc.jpg", "wb") do |f| f.write(Base64.decode64(data)) end
File.open("ccc.jpg", "wb") do |f|
message.unpack('a*')
message
f1.bytes
f1.size
f1.methods
f1 = File.open('/tmp/testfile.png', 'r')
f1 = File.open('/tmp/testfile.png', r)
ff.close
ff.write message
ff = File.open("/tmp/aaa.jpg", "wb")
message
continue
mseeage
continue
ff.close
ff.write message
message
ff = File.open("/tmp/abc.txt", "wb")
File.open("/tmp/abc.txt", "wb").write(message)
message
File.open("/tmp/abc.txt", "wb").write(message.unpack('a*'))
continue
File.open("/tmp/abc.jpg", "wb").write(message.unpack('a*'))
File.open("/tmp/1234.jpg", "wb").write(message.unpack('a*'))
message.unpack('a*')
message
continue
message
continue
message
continue
list
message
list
continue
message
continue
message
abort
message
abort
message
messages
message
ff = File.new("~/Desktop/1234.jpg", "w")
ff = File.new("~/Destop/1234.jpg", "w")
ff.close
ff.write message
ff = File.new("/tmp/1234.jpg", "w")
File.new("/tmp/1234.jpg", "w")
File.new("/tmp/1234.jpg")
File.open("/tmp/1234.jpg")
message
continue
message
continue
message
continue
message
continue
message
abort
message
continue
ff.methods
ff
ff = File.new("tmp/1234.txt", "w")
message.unpack('qq')
message.unpack
message
File.open('test.bin', 'wb') {|file| BinData::Int32be.new(message).write(file) }
message
continue
self.data
self.methods
data
event
data
event
self.methods
self
var all
var 
var -all
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
message
continue
messages
message
file
continue
$stdin.class.methods
$stdin.class
$stdin
#stdin
var all
@_dispatcher.connection_manager
@_dispatcher.methods
@_dispatcher.receive_encoded 0, 0
@_dispatcher.receive_encoded 1, 2
@_dispatcher.receive_encoded 1 2
@_dispatcher.receive_encoded
@_dispatcher.receive
@_dispatcher.methods
@_dispatcher
var all
var
vart
controller_store[:message_count]
message
continue
message
continue
files
file
params
task
message
continue
message
params
task
continue
rowData
message
params
file
data
continue
var const
var args
var const
var local
var
message
continue
task
message
var all
var
help
list
params
rowData
task
continue
message
continue
params
continue
params
